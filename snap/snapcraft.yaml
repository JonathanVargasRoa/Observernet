# Copyright (c) 2018-2019 The Ion developers
# Copyright (c) 2019 The OBSR developers
name: obsr
version: v1.1.01
summary:   peer-to-peer network based digital currency
description: |
  Obsr is a free open source peer-to-peer electronic cash system that
  is completely decentralized, without the need for a central server or
  trusted parties.  Users hold the crypto keys to their own money and
  transact directly with each other, with the help of a P2P network to
  check for double-spending.

grade: stable
confinement: strict
icon: share/pixmaps/bitcoin256.png
apps:
  daemon:
    command: obsrd
    plugs: [network, network-bind, home, removable-media]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  daemon-testnet:
    command: obsrd --testnet
    plugs: [network, network-bind, home, removable-media]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  daemon-regtest:
    command: obsrd --regtest
    plugs: [network, network-bind, home, removable-media]
  qt:
    command: desktop-launch obsr-qt
    plugs: [network, network-bind, unity7, unity8-calendar, unity8-contacts, desktop, desktop-legacy, wayland, x11, mir, opengl, home, removable-media]
    desktop: qt.desktop
  qt-testnet:
    command: desktop-launch obsr-qt --testnet
    plugs: [network, network-bind, unity7, unity8-calendar, unity8-contacts, desktop, desktop-legacy, wayland, x11, mir, opengl, home, removable-media]
    desktop: qt-testnet.desktop
  qt-regtest:
    command: desktop-launch obsr-qt --regtest
    plugs: [network, network-bind, unity7, unity8-calendar, unity8-contacts, desktop, desktop-legacy, wayland, x11, mir, opengl, home, removable-media]
    desktop: qt-regtest.desktop
  cli:
    command: obsr-cli
    plugs: [network, network-bind, home]
  cli-testnet:
    command: obsr-cli --testnet
    plugs: [network, network-bind, home]
  cli-regtest:
    command: obsr-cli --regtest
    plugs: [network, network-bind, home]
  tx:
    command: obsr-tx
    plugs: [home]
parts:
  obsr:
    source: https://github.com/observernet/obsr
    source-type: git
    source-tag: master
    plugin: nil
    override-build: |
      WRAP_DIR=$HOME/wrapped
      if [ $SNAPCRAFT_ARCH_TRIPLET = "i386-linux-gnu" ]
      then
        HOSTS=i686-linux-gnu
      else
        HOSTS=$SNAPCRAFT_ARCH_TRIPLET
      fi
      #HOSTS="i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu"
      CONFIGFLAGS="--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests"
      FAKETIME_HOST_PROGS="gcc g++"
      FAKETIME_PROGS="date ar ranlib nm"
      HOST_CFLAGS="-O2 -g"
      HOST_CXXFLAGS="-O2 -g"
      HOST_LDFLAGS=-static-libstdc++
      export QT_RCC_TEST=1
      export QT_RCC_SOURCE_DATE_OVERRIDE=1
      export GZIP="-9n"
      export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
      export TZ="UTC"
      export BUILD_DIR=`pwd`
      mkdir -p ${WRAP_DIR}
      if test -n "$GBUILD_CACHE_ENABLED"; then
        export SOURCES_PATH=${GBUILD_COMMON_CACHE}
        export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
        mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
      fi
      function create_global_faketime_wrappers {
      for prog in ${FAKETIME_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
        echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${prog}
        chmod +x ${WRAP_DIR}/${prog}
      done
      }
      function create_per-host_faketime_wrappers {
      for i in $HOSTS; do
        for prog in ${FAKETIME_HOST_PROGS}; do
            if which ${i}-${prog}-8
            then
                echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
                echo "REAL=\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
                echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
                echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
                echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
                chmod +x ${WRAP_DIR}/${i}-${prog}
            fi
        done
      done
      }
      # Faketime for depends so intermediate results are comparable
      export PATH_orig=${PATH}
      create_global_faketime_wrappers "2000-01-01 12:00:00"
      create_per-host_faketime_wrappers "2000-01-01 12:00:00"
      export PATH=${WRAP_DIR}:${PATH}
      for i in ${HOSTS}; do
      if [ ${i} = "arm-linux-gnueabihf" ]
        then
          update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc \
          arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-4.8 100
          update-alternatives --install /usr/bin/arm-linux-gnueabihf-g++ \
          arm-linux-gnueabihf-g++ /usr/bin/arm-linux-gnueabihf-g++-4.8 100
          make HOST=$SNAPCRAFT_ARCH_TRIPLET
        fi
      done
      EXTRA_INCLUDES_BASE=$WRAP_DIR/extra_includes
      mkdir -p $EXTRA_INCLUDES_BASE
      # x86 needs /usr/include/i386-linux-gnu/asm pointed to /usr/include/x86_64-linux-gnu/asm,
      # but we can't write there. Instead, create a link here and force it to be included in the
      # search paths by wrapping gcc/g++.
      mkdir -p $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu
      rm -f $WRAP_DIR/extra_includes/i686-pc-linux-gnu/asm
      ln -s /usr/include/x86_64-linux-gnu/asm $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu/asm
      for prog in gcc g++; do
      rm -f ${WRAP_DIR}/${prog}
      cat << EOF > ${WRAP_DIR}/${prog}
      #!/usr/bin/env bash
      REAL="`which -a ${prog}-8 | grep -v ${WRAP_DIR}/${prog} | head -1`"
      for var in "\$@"
      do
        if [ "\$var" = "-m32" ]; then
          export C_INCLUDE_PATH="$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu"
          export CPLUS_INCLUDE_PATH="$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu"
          break
        fi
      done
      \$REAL \$@
      EOF
      chmod +x ${WRAP_DIR}/${prog}
      done
      cd $SNAPCRAFT_PART_BUILD
      BASEPREFIX=`pwd`/depends
      # Build dependencies for each host
      for i in $HOSTS; do
        EXTRA_INCLUDES="$EXTRA_INCLUDES_BASE/$i"
        if [ -d "$EXTRA_INCLUDES" ]; then
          export HOST_ID_SALT="$EXTRA_INCLUDES"
        fi
        make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
        unset HOST_ID_SALT
      done
      # Faketime for binaries
      export PATH=${PATH_orig}
      create_global_faketime_wrappers "${REFERENCE_DATETIME}"
      create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
      export PATH=${WRAP_DIR}:${PATH}
      # Create the release tarball using (arbitrarily) the first host
      ./autogen.sh
      CONFIG_SITE=${BASEPREFIX}/`echo "${HOSTS}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/
      make dist
      SOURCEDIST=`echo obsr-*.tar.gz`
      DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`
      # Correct tar file order
      mkdir -p temp
      pushd temp
      tar xf ../$SOURCEDIST
      find obsr-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | xz -9 > ../$SOURCEDIST
      popd
      # Workaround for tarball not building with the bare tag version (prep)
      make -C src obj/build.h
      ORIGPATH="$PATH"
      # Extract the release tarball into a dir for each host and build
      for i in ${HOSTS}; do
        export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
        mkdir -p distsrc-${i}
        cd distsrc-${i}
        INSTALLPATH=$SNAPCRAFT_PART_INSTALL
        #mkdir -p ${INSTALLPATH}
        tar --strip-components=1 -xJf ../$SOURCEDIST
        # Workaround for tarball not building with the bare tag version
        echo '#!/bin/true' >share/genbuild.sh
        mkdir src/obj
        cp ../src/obj/build.h src/obj/
        CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS}" CXXFLAGS="${HOST_CXXFLAGS}" LDFLAGS="${HOST_LDFLAGS}"
        make ${MAKEOPTS}
        make ${MAKEOPTS} -C src check-security
        make ${MAKEOPTS} -C src check-symbols
        make install DESTDIR=${INSTALLPATH}
        cd ${INSTALLPATH}
        find . -name "lib*.la" -delete
        find . -name "lib*.a" -delete
        rm -rf ${DISTNAME}/lib/pkgconfig
        find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
        ## find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \;
        #find ${DISTNAME} -not -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | xz -9 > ${OUTDIR}/${DISTNAME}-${i}.tar.xz
        #find ${DISTNAME} -name "*.dbg" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | xz -9 > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.xz
        cd ../../
        rm -rf distsrc-${i}
      done